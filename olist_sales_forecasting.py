# -*- coding: utf-8 -*-
"""Olist_Sales_Forecasting

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PhDvMqV9tLCTgk6POGTm-bkJYiIfkZnQ

# Olist Data Analysis and Sales Forecasting

This notebook performs an exploratory data analysis on the Olist e-commerce dataset and forecasts monthly sales using the Prophet library.

## Steps Taken:

1.  **Data Upload and Extraction**: Uploaded a zipped file containing the Olist datasets and extracted the CSV files.
2.  **Data Loading**: Loaded individual CSV files into pandas DataFrames and stored them in a dictionary for easy access.
3.  **Data Merging**: Merged the `orders`, `order_items`, and `payments` DataFrames based on the 'order_id' to create a combined dataset for analysis.
4.  **Date Conversion**: Converted the `order_purchase_timestamp` column to datetime objects to enable time-based analysis.
5.  **Monthly Sales Aggregation**: Grouped the data by month based on the purchase timestamp and calculated the total sales ('price') for each month.
6.  **Data Preparation for Prophet**: Formatted the aggregated monthly sales data into a DataFrame with columns 'ds' (datestamp) and 'y' (total sales) as required by the Prophet library.
7.  **Sales Forecasting with Prophet**: Initialized and fitted a Prophet model to the monthly sales data and generated a forecast for future periods.
8.  **Visualization**: Plotted the historical sales data and the Prophet forecast, along with the components of the forecast (trend, seasonality).

## Key Points:

*   The Olist dataset contains information about orders, customers, products, sellers, payments, reviews, and geolocation.
*   Merging relevant tables is crucial for a comprehensive analysis.
*   Converting date columns to datetime objects is essential for time-series analysis and forecasting.
*   Prophet is a powerful library for forecasting time series data with strong seasonal components.

## Actions Performed:

*   Unzipped the dataset file.
*   Read multiple CSV files into pandas DataFrames.
*   Performed inner merges on DataFrames.
*   Used `pd.to_datetime` to convert columns.
*   Used `groupby()` and `pd.Grouper()` to aggregate data by month.
*   Used the Prophet library for time series modeling and forecasting.
*   Generated plots to visualize historical data and forecasts.

## Recommendations and Insights:

*   The monthly sales trend shows seasonality, which is captured by the Prophet model's yearly component.
*   The forecast provides an estimate of future sales, which can be used for planning and decision-making.
*   Further analysis could include exploring weekly or daily seasonality, adding holidays or special events as regressors in the Prophet model, or comparing Prophet's performance with other forecasting methods.
*   Investigating the periods with zero sales (e.g., November 2016) could provide insights into data completeness or specific events.
*   Analyzing other aspects of the data, such as customer behavior, product performance, or seller impact, could provide additional business insights.
"""

from google.colab import files
uploaded = files.upload()

import zipfile
import io

zip_file_name = list(uploaded.keys())[0]
zip_ref = zipfile.ZipFile(io.BytesIO(uploaded[zip_file_name]), 'r')
zip_ref.extractall('.')
zip_ref.close()

print(f"File '{zip_file_name}' unzipped successfully.")

import pandas as pd
import os

# List all files in the current directory
file_list = os.listdir('.')

# Filter for CSV files
csv_files = [file for file in file_list if file.endswith('.csv')]

print("Available CSV files:")
for csv_file in csv_files:
    print(csv_file)

# List of CSV files to display
files_to_display = [
    'olist_order_items_dataset.csv',
    'product_category_name_translation.csv',
    'olist_order_payments_dataset.csv',
    'olist_customers_dataset.csv',
    'olist_order_reviews_dataset.csv',
    'olist_sellers_dataset.csv',
    'olist_orders_dataset.csv',
    'olist_geolocation_dataset.csv',
    'olist_products_dataset.csv'
]

for file_name in files_to_display:
    df_name = os.path.splitext(file_name)[0]
    if df_name in dataframes:
        print(f"\nDisplaying head of '{file_name}':")
        display(dataframes[df_name].head())
    else:
        print(f"\nDataFrame for '{file_name}' not found in the dictionary.")

orders_df = pd.read_csv('olist_orders_dataset.csv')
order_items_df = pd.read_csv('olist_order_items_dataset.csv')
customers_df = pd.read_csv('olist_customers_dataset.csv')
products_df = pd.read_csv('olist_products_dataset.csv')
sellers_df = pd.read_csv('olist_sellers_dataset.csv')

merged_df = pd.merge(orders_df, order_items_df, on='order_id', how='inner')
merged_df = pd.merge(merged_df, customers_df, on='customer_id', how='inner')
merged_df = pd.merge(merged_df, products_df, on='product_id', how='inner')
merged_df = pd.merge(merged_df, sellers_df, on='seller_id', how='inner')

display(merged_df.head())

data['order_purchase_timestamp'] = pd.to_datetime(data['order_purchase_timestamp'])
display(data['order_purchase_timestamp'].head())

monthly_sales = data.groupby(
    pd.Grouper(key='order_purchase_timestamp', freq='M')
)['price'].sum().reset_index()

# Rename columns to match Prophet format
monthly_sales.columns = ['ds', 'y']

# Check it
display(monthly_sales.head())

missing_percentage = merged_df.isnull().sum() / len(merged_df) * 100
print("Percentage of missing values per column:")
print(missing_percentage)

# Drop rows where 'order_approved_at', 'order_delivered_carrier_date',
# 'order_delivered_customer_date', 'product_category_name',
# 'product_name_lenght', 'product_description_lenght',
# 'product_photos_qty', 'product_weight_g', 'product_length_cm',
# 'product_height_cm', 'product_width_cm' have missing values.
columns_to_drop_rows = [
    'order_approved_at',
    'order_delivered_carrier_date',
    'order_delivered_customer_date',
    'product_category_name',
    'product_name_lenght',
    'product_description_lenght',
    'product_photos_qty',
    'product_weight_g',
    'product_length_cm',
    'product_height_cm',
    'product_width_cm'
]
merged_df.dropna(subset=columns_to_drop_rows, inplace=True)

# Verify that missing values have been handled
missing_percentage_after_drop = merged_df.isnull().sum() / len(merged_df) * 100
print("\nPercentage of missing values per column after dropping rows:")
print(missing_percentage_after_drop)

date_columns = [
    'order_purchase_timestamp',
    'order_approved_at',
    'order_delivered_carrier_date',
    'order_delivered_customer_date',
    'order_estimated_delivery_date',
    'shipping_limit_date'
]

for col in date_columns:
    merged_df[col] = pd.to_datetime(merged_df[col])

display(merged_df.dtypes)

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 5))
plt.plot(monthly_sales['Month'], monthly_sales['Total_Sales'], marker='o')
plt.title('Monthly Sales Trend')
plt.xlabel('Month')
plt.ylabel('Total Sales (BRL)')
plt.grid()
plt.show()

!pip install prophet

from prophet import Prophet

model = Prophet()
model.fit(monthly_sales)

future = model.make_future_dataframe(periods=6, freq='M')
future.tail()

forecast = model.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

fig1 = model.plot(forecast)

fig2 = model.plot_components(forecast)

forecast_output = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].copy()
forecast_output.columns = ['Month', 'Predicted_Sales', 'Lower_Bound', 'Upper_Bound']
forecast_output.head()

forecast_output.to_csv("olist_sales_forecast.csv", index=False)

from google.colab import files
files.download("olist_sales_forecast.csv")

monthly_sales.to_csv("olist_actual_sales.csv", index=False)
from google.colab import files
files.download("olist_actual_sales.csv")

# Rename columns for consistency
monthly_sales.columns = ['Month', 'Sales']
monthly_sales['Type'] = 'Actual'
monthly_sales.head()

# Rename and select relevant columns
forecast_output = forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].copy()
forecast_output.columns = ['Month', 'Sales', 'Lower_Bound', 'Upper_Bound']
forecast_output['Type'] = 'Forecast'
forecast_output.head()

# Make column names match
actual = monthly_sales[['Month', 'Sales', 'Type']]
forecast = forecast_output[['Month', 'Sales', 'Type']]

# Combine
combined_data = pd.concat([actual, forecast])

# Export for Power BI
combined_data.to_csv("olist_combined_sales.csv", index=False)
from google.colab import files
files.download("olist_combined_sales.csv")